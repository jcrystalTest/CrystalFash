package dev.jcrystal.crystalfash.entities;

import jcrystal.clients.ClientAndroid;
import jcrystal.clients.ClientIos;
import jcrystal.clients.ClientWeb;
import jcrystal.entity.types.Autogenerated;
import jcrystal.reflection.annotations.EntityIndex;
import jcrystal.reflection.annotations.EntityProperty;
import jcrystal.reflection.annotations.IndexType;
import jcrystal.reflection.annotations.jEntity;
import jcrystal.server.Entity;

@EntityIndex(name="byCategory", value= {"category"})
@jEntity
public class Product implements Entity.DefaultDB{
	
	@jcrystal.reflection.annotations.EntityKey
	private static Autogenerated id;
	
	@EntityProperty
	private static String name;
	
	@EntityProperty
	private static String description;
	
	@EntityProperty(index = IndexType.MULTIPLE)
	private static Categories category;
	
	@EntityProperty
	private static double price;
	
	@EntityProperty
	private static double discount;
	
	@EntityProperty
	private static double oldPrice;
	
	@EntityProperty
	private static Color color;
	
	@EntityProperty
	private static Size size;
	
	@EntityProperty
	private static String image;

/* GEN */
	public static final String ENTITY_NAME = "Product";
	protected final com.google.appengine.api.datastore.Entity rawEntity;
	public final com.google.appengine.api.datastore.Entity getRawEntity(){return rawEntity;}
	public Product(com.google.appengine.api.datastore.Entity rawEntity){
		this.rawEntity = rawEntity;
	}
	public Product(){
		rawEntity = new com.google.appengine.api.datastore.Entity(ENTITY_NAME);
	}
	protected Product(String entityName){
		rawEntity = new com.google.appengine.api.datastore.Entity(entityName);
	}
	public Product cloneFrom(Product from){
		this.rawEntity.setPropertiesFrom(from.rawEntity);
		return this;
	}
	public Long id(){
		return rawEntity.getKey().getId();
	}
	public Product put(){
		jcrystal.context.CrystalContext.get().DefaultDB().service.put(null, rawEntity);
		return this;
	}
	public Product putTxn(){
		jcrystal.context.CrystalContext $ctx = jcrystal.context.CrystalContext.get();
		$ctx.DefaultDB().service.put($ctx.DefaultDB().getTxn(), rawEntity);
		return this;
	}
	public static com.google.appengine.api.datastore.Entity rawGetTxn(Long id){
		if(null == id){return null;}
		try{
			jcrystal.context.CrystalContext $ctx = jcrystal.context.CrystalContext.get();
			return $ctx.DefaultDB().service.get($ctx.DefaultDB().getTxn(), Product.Key.createRawKey(id));
		}
		catch(com.google.appengine.api.datastore.EntityNotFoundException | java.lang.IllegalArgumentException e){
			return null;
		}
	}
	public static com.google.appengine.api.datastore.Entity rawGet(Long id){
		if(null == id){return null;}
		try{
			return jcrystal.context.CrystalContext.get().DefaultDB().service.get(null, Product.Key.createRawKey(id));
		}
		catch(com.google.appengine.api.datastore.EntityNotFoundException | java.lang.IllegalArgumentException e){
			return null;
		}
	}
	public static Product get(Long id){
		com.google.appengine.api.datastore.Entity ent = rawGet(id);
		if(ent == null)return null;
		return new Product(ent);
	}
	public static Product getTxn(Long id){
		com.google.appengine.api.datastore.Entity ent = rawGetTxn(id);
		if(ent == null)return null;
		return new Product(ent);
	}
	public static Product get(com.google.appengine.api.datastore.Key $key){
		if($key == null){return null;}
		try{
			return new Product(jcrystal.context.CrystalContext.get().DefaultDB().service.get(null, $key));
		}
		catch(com.google.appengine.api.datastore.EntityNotFoundException | java.lang.IllegalArgumentException e){
			return null;
		}
	}
	public static Product getTxn(com.google.appengine.api.datastore.Key $key){
		if($key == null){return null;}
		try{
			jcrystal.context.CrystalContext $ctx = jcrystal.context.CrystalContext.get();
			return new Product($ctx.DefaultDB().service.get($ctx.DefaultDB().getTxn(), $key));
		}
		catch(com.google.appengine.api.datastore.EntityNotFoundException | java.lang.IllegalArgumentException e){
			return null;
		}
	}
	public static boolean exist(Long id){
		com.google.appengine.api.datastore.Entity ent = rawGet(id);
		return ent != null;
	}
	public static Product tryGet(Long id){
		com.google.appengine.api.datastore.Entity ent = rawGet(id);
		if(ent == null)throw new jcrystal.utils.InternalException(17, "Identificador invalido");
		return new Product(ent);
	}
	public static Product tryGet(Long id, Product $defValue){
		com.google.appengine.api.datastore.Entity ent = rawGet(id);
		if(ent == null)return $defValue;
		return new Product(ent);
	}
	public static Product tryGetTxn(Long id){
		com.google.appengine.api.datastore.Entity ent = rawGetTxn(id);
		if(ent == null)throw new jcrystal.utils.InternalException(17, "Identificador invalido");
		return new Product(ent);
	}
	public Product name(String name){
		rawEntity.setUnindexedProperty("name", name);
		return this;
	}
	public Product description(String description){
		rawEntity.setUnindexedProperty("description", description);
		return this;
	}
	public Product category(dev.jcrystal.crystalfash.entities.Categories category){
		if(category == null){
			rawEntity.setIndexedProperty("category", null);
		}
		else{
			rawEntity.setIndexedProperty("category", category.id);
		}
		return this;
	}
	public Product price(double price){
		rawEntity.setUnindexedProperty("price", price);
		return this;
	}
	public Product discount(double discount){
		rawEntity.setUnindexedProperty("discount", discount);
		return this;
	}
	public Product oldPrice(double oldPrice){
		rawEntity.setUnindexedProperty("oldPrice", oldPrice);
		return this;
	}
	public Product color(dev.jcrystal.crystalfash.entities.Color color){
		if(color == null){
			rawEntity.setUnindexedProperty("color", null);
		}
		else{
			rawEntity.setUnindexedProperty("color", color.id);
		}
		return this;
	}
	public Product size(dev.jcrystal.crystalfash.entities.Size size){
		if(size == null){
			rawEntity.setUnindexedProperty("size", null);
		}
		else{
			rawEntity.setUnindexedProperty("size", size.id);
		}
		return this;
	}
	public Product image(String image){
		rawEntity.setUnindexedProperty("image", image);
		return this;
	}
	public dev.jcrystal.crystalfash.entities.CartItem items(){
		return dev.jcrystal.crystalfash.entities.CartItem.Query.Product.get(id());
	}
	public String name(){
		return jcrystal.db.datastore.EntityUtils.getString(rawEntity, "name");
	}
	public String description(){
		return jcrystal.db.datastore.EntityUtils.getString(rawEntity, "description");
	}
	public dev.jcrystal.crystalfash.entities.Categories category(){
		return Categories.fromId(jcrystal.db.datastore.EntityUtils.getInt(rawEntity, "category"));
	}
	public double price(){
		return jcrystal.db.datastore.EntityUtils.getDouble(rawEntity, "price", 0);
	}
	public double discount(){
		return jcrystal.db.datastore.EntityUtils.getDouble(rawEntity, "discount", 0);
	}
	public double oldPrice(){
		return jcrystal.db.datastore.EntityUtils.getDouble(rawEntity, "oldPrice", 0);
	}
	public dev.jcrystal.crystalfash.entities.Color color(){
		return Color.fromId(jcrystal.db.datastore.EntityUtils.getInt(rawEntity, "color"));
	}
	public dev.jcrystal.crystalfash.entities.Size size(){
		return Size.fromId(jcrystal.db.datastore.EntityUtils.getInt(rawEntity, "size"));
	}
	public String image(){
		return jcrystal.db.datastore.EntityUtils.getString(rawEntity, "image");
	}
	public static class CachedGetter{
		private java.util.TreeMap<Long, Product> cache = new java.util.TreeMap<>();
		public Product get(Long id){
			Product ret = cache.get(id);
			if(ret == null){
				cache.put(id, ret = Product.get(id));
			}
			return ret;
		}
	}
	public static class Post extends PostProduct{}
	public static class Serializer extends SerializerProduct{}
	public static class Query extends QueryProduct{}
	public static class Batch extends BatchProduct{}
	public static class Key{
		private Key(){}
		public static com.google.appengine.api.datastore.Key createRawKey(Long id){
			return com.google.appengine.api.datastore.KeyFactory.createKey(ENTITY_NAME, id);
		}
	}
	public static class Meta extends MetaProduct{}
/* END */
}
